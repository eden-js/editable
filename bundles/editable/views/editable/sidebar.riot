<editable-sidebar>
  <div class="eden-blocks-backdrop" if={ showing } onclick={ (e) => hide(e) } />
  <div class={ classes({ 'eden-blocks-sidebar' : true, 'eden-blocks-sidebar-show' : showing }) }>
    <div class="card">
      <div class="card-header">
        <div class="w-100">
          <h5>
            Select Block
          </h5>

          <ul class="nav nav-tabs card-header-tabs">
            <li class="nav-item" each={ (tab, i) in getTabs() }>
              <button class={ classes({ 'nav-link' : true, 'active' : isTab(tab) }) } onclick={ (e) => onTab(e, tab) }>
                { eden.get('i18n.t')(`cms.category.${tab}`) }
              </button>
            </li>
          </ul>
        </div>
      </div>

      <div class="card-body">
        <div class="form-group">
          <input class="form-control" placeholder="search" type="Search" onkeyup={ (e) => onSearch(e) } onchange={ (e) => onSearch(e) } ref="search" />
        </div>
        <ul class="list-group">
          <li each={ (block, i) in getBlocks(tab) } class={ classes({ 'list-group-item list-group-item-action flex-column align-items-start' : true, 'active' : isActive(block) }) } onclick={ (e) => onBlock(e, block) }>
            <div class="d-flex w-100 justify-content-between">
              <h5 class="mb-1">
                { block.opts.title }
              </h5>
            </div>
            <p class="m-0">{ block.opts.description }</p>
          </li>
        </ul>

      </div>
      <div class="card-footer">
        <button type="button" class="btn btn-secondary float-right" onclick={ (e) => hide(e) }>Close</button>
        <button type="button" class={ classes({ 'btn btn-primary' : true, 'disabled' : !type || loading() }) } onclick={ (e) => onAddBlock(e) }>
          { loading() ? 'Adding block...' : (type ? 'Add block' : 'Select block') }
        </button>
      </div>
    </div>
  </div>
  
  <script>
    // import base
    import Base from '../js/base';
    import uuid from 'uuid';

    // export default
    export default class EditableSidebar extends Base {
      
      /**
       * on before mount
       *
       * @param {Object} props
       */
      onBeforeMount(props) {
        // on before mount
        super.onBeforeMount(...arguments);
        
        // set showing
        this.tab = 'default';
        this.showing = false;

        // bind methods
        this.onBlock = this.onBlock.bind(this);
        this.onAddBlock = this.onAddBlock.bind(this);
      }

      /**
      * Shows sidebar
      */
      show() {
        // set showing
        this.showing = true;

        // update
        this.update();
      }

      /**
      * Shows sidebar
      */
      hide() {
        // set showing
        this.showing = false;

        // update
        this.update();
      }

      /**
      * on block
      *
      * @param  {Event} e
      */
      onTab (e, item) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // activate block
        this.tab = item;

        // update view
        this.update();
      }

      /**
      * on block
      *
      * @param  {Event} e
      */
      onBlock (e, block) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // activate block
        this.type = block.type || block.tag;

        // update view
        this.update();
      }

      /**
      * on block
      *
      * on search
      */
      onSearch(e) {
        // check search
        this.search = this.$('[ref="search"]').value;

        // update view
        this.update();
      }

      /**
      * on block
      *
      * @param  {Event} e
      */
      async onAddBlock (e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set loading
        this.loading('add', true);

        // update view
        this.update();

        console.log(this.type);

        // add block by type
        await this.props.addBlock(this.type);

        // set loading
        this.type = null;
        this.loading('add', false);

        // close modal
        this.hide();
      }

      /**
      * gets tabs
      */
      getTabs() {
        // return categories
        return (this.props.blocks || []).reduce((accum, block) => {
          // loop categories
          (block.opts.categories || []).forEach((category) => {
            // add category
            if (!accum.includes(category)) accum.push(category);
          });

          // return accumulator
          return accum;
        }, ['default']);
      }
    
      /**
      * gets blocks
      *
      * @return {*}
      */
      getBlocks (category = 'default') {
        // return sorted blocks
        let rtn = (this.props.blocks || []).sort((a, b) => {
          // Return sort
          return ('' + a.opts.title).localeCompare(b.opts.title);
        });

        // check default
        if (category !== 'default') {
          rtn = rtn.filter((block) => {
            // set category
            return (block.opts.categories || []).includes(category);
          });
        } else {
          rtn = rtn.filter((block) => {
            // check categories
            return !(block.opts.categories);
          });
        }

        // do block search
        if (this.search && this.search.length) rtn = rtn.filter((block) => {
          // check search
          return ('' + block.opts.title).toLowerCase().includes(this.search.toLowerCase());
        });

        // return rtn
        return rtn || [];
      }

      /**
      * on is active
      *
      * @param  {Object}  block
      *
      * @return {Boolean}
      */
      isTab (tab) {
        // return type
        return this.tab === tab;
      }

      /**
      * on is active
      *
      * @param  {Object}  block
      *
      * @return {Boolean}
      */
      isActive (block) {
        // return type
        return this.type === block.type;
      }
    }
  </script>
</editable-sidebar>
