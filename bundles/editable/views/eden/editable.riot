<eden-editable>
  <div ref="editable" class="eden-editable grid-stack" if={ show }>

    <div each={ (el, i) in placement.get('blocks', []) } class="grid-stack-item" data-gs-x={ el._grid.x || '0' } data-gs-y={ el._grid.y || '0' } data-gs-width={ el._grid.w || 1 } data-gs-height={ el._grid.h || 1 }>
      <div class="grid-stack-item-content">
        <div editing={ editing } preview={ preview } el={ el } class={ el.class } is={ getElement(el) } data-block={ el.uuid } data={ el } block={ el } on-editing={ (e) => onEditing(e) } on-save={ (e) => onSaveBlock(e) } on-remove={ (e) => onRemoveBlock(e) } on-refresh={ (e) => onRefreshBlock(e) } placement={ i } i={ i } />
      </div>
    </div>

    <div class="grid-stack-item grid-stack-item-add" data-gs-x={ placement.get('add._grid.x') || '0' } data-gs-y={ placement.get('add._grid.y') || '0' } data-gs-width={ placement.get('add._grid.w') || '4' } data-gs-height={ placement.get('add._grid.h') || '2' }>
      <div class="grid-stack-item-content">
        <button ref="on-add" class="grid-add" onclick={ (e) => onAddPress(e) }>
          Add Widget
        </button>
      </div>
    </div>
  </div>
  <editable-sidebar ref={ ref('sidebar') } blocks={ props.blocks } add-block={ (type) => onAddBlock(type) } />

  <script>
    // import base
    import Base from '../js/base';
    import User from '../js/user';
    import Model from '../js/model';
    import uuid from 'uuid';

    // export default
    export default class Dashboard extends Base {
      
      /**
       * on before mount
       *
       * @param {Object} props
       */
      onBeforeMount(props) {
        // on before mount
        super.onBeforeMount(...arguments);

        // model
        User(this);
        Model(this);

        // bind methods
        this.onEditing = this.onEditing.bind(this);
        this.onAddPress = this.onAddPress.bind(this);
        this.onRemoveBlock = this.onRemoveBlock.bind(this);

        // set values
        this.show      = true;
        this.placement = this.props.placement ? (this.props.model ? this.parent.placement : this.model('placement', this.props.placement)) : this.model('placement', {
          'position' : this.props.position
        });
      }

      /**
       * on mounted
       *
       * @param {Object} props
       */
      onMounted() {
        // on before mount
        super.onBeforeMount(...arguments);

        // check frontend
        if (!this.eden.frontend) return;

        // set placement
        this.placement = this.props.placement ? (this.props.model ? this.parent.placement : this.model('placement', this.props.placement)) : this.model('placement', {
          'position' : this.props.position
        });

        // init dragula
        if (!this.grid) this.initGrid();
      }

      /**
      * get element
      *
      * @param  {Object} child
      *
      * @return {*}
      */
      getElement (child) {
        // return get child
        return (child || {}).tag ? 'block-' + (child || {}).tag : 'eden-loading';
      }

      /**
      * on add block
      *
      * @param  {Event} e
      *
      * @return {*}
      */
      onAddPress (e) {
        // prevent
        e.preventDefault();
        e.stopPropagation();

        // open modal
        if (this.refs.sidebar) this.refs.sidebar.show();
      }
      
      /**
       * set editing
       *
       * @param  {Object} block
       */
      onEditing(block) {
        // set editing
        this.editing = block ? block.uuid : null;
      }

      /**
      * adds block by type
      *
      * @param  {String} type
      *
      * @return {*}
      */
      async onAddBlock (type) {
        // set type
        if (!type) type = this.refs.sidebar.type;

        // get uuid
        const dotProp = require('dot-prop-immutable');

        // lowest rightest
        const lowestRightest = (this.placement.get('blocks') || []).reduce((accum, block) => {
          // get bottommost
          const right = parseInt(block._grid.x) + parseInt(block._grid.w);
          const bottom = parseInt(block._grid.h) + parseInt(block._grid.y);

          const aRight = (parseInt(accum._grid.x) + parseInt(accum._grid.w));
          const aBottom = (parseInt(accum._grid.h) + parseInt(accum._grid.y));

          // lower bottom
          if (bottom > aBottom) {
            // return
            return block;
          } else if (bottom === aBottom && right > aRight) {
            // return block
            return block;
          }

          // return accumulated
          return accum;
        }, {
          _grid : this.placement.get('add._grid') || {
            w : 4,
            h : 2,
            x : 0,
            y : 0
          }
        });

        // bottom
        const right = lowestRightest._grid.x + lowestRightest._grid.w;
        const bottom = lowestRightest._grid.y + lowestRightest._grid.h;

        // create block
        let block = {
          'uuid' : uuid(),
          'type' : type,
          '_grid' : this.placement.get('add._grid') || {
            w : 4,
            h : 2,
            x : 0,
            y : 0
          },
        };

        // set new add placement
        this.placement.set('add._grid', {
          w : 4,
          h : 2,
          x : (right >= 12 ? 0 : right),
          y : (right >= 12 ? bottom : bottom),
        });

        // check positions
        if (!this.placement.get('blocks')) this.placement.set('blocks', []);

        // push block
        this.placement.get('blocks').push(block);

        // save placement
        await this.onSaveBlock(block);
      }

      /**
      * on refresh block
      *
      * @param  {Event}  e
      * @param  {Object} block
      */
      async onSaveBlock (block, preventUpdate) {
        // clone
        const blockClone = Object.assign({}, block);

        // prevent update check
        if (!preventUpdate) {
          // set loading
          block.saving = true;

          // update view
          this.updateGrid();
        }

        // delete editing
        delete block.saving;
        delete blockClone.saving;

        // log data
        const res = await fetch(`/editable/placement/${this.placement.get('id')}/block/save`, {
          'body' : JSON.stringify({
            'block' : blockClone
          }),
          'method'  : 'post',
          'headers' : {
            'Content-Type' : 'application/json'
          },
          'credentials' : 'same-origin'
        });

        // load data
        const result = await res.json();

        // set logic
        for (let key in result.result) {
          // clone to placement
          block[key] = result.result[key];
        }

        // save placement
        await this.savePlacement(preventUpdate);

        // check prevent update
        if (!preventUpdate) {
          // set loading
          delete blockClone.saving;

          // update view
          this.updateGrid();
        }
      }

      /**
       * on refresh block
       *
       * @param  {Event}  e
       * @param  {Object} block
       */
      async onRemoveBlock (block, data, placement) {
        // set loading
        block.removing = true;

        // update view
        this.update();

        // get positions
        const blocks = (this.placement.get('blocks') || []).filter((b) => b.uuid !== block.uuid);

        // set blocks
        this.placement.set('blocks', blocks);

        // save placement
        await this.savePlacement();
      }

      /**
      * saves placement
      *
      * @param {Boolean} preventRefresh
      *
      * @return {Promise}
      */
      async savePlacement (preventRefresh) {
        // set loading
        this.loading('save', true);

        // check type
        if (!this.placement.type) this.placement.set('position', this.props.position);

        // log data
        let res = await fetch('/editable/placement/' + (this.placement.get('id') ? this.placement.get('id') + '/update' : 'create'), {
          'body'    : JSON.stringify(this.placement.get()),
          'method'  : 'post',
          'headers' : {
            'Content-Type' : 'application/json'
          },
          'credentials' : 'same-origin'
        });

        // load data
        let data = await res.json();

        // set logic
        for (let key in data.result) {
          // clone to placement
          this.placement.set(key, data.result[key]);

          // set in this.props
          if (data.result[key] && !this.props.model) this.props.placement[key] = data.result[key];
        }

        // on save
        if (this.props.onSave) this.props.onSave(this.placement);

        // set loading
        this.loading('save', false);

        // update view
        this.updateGrid();
      }

      /**
      * init dragula
      */
      initGrid () {
        // check required
        if (!this.required) {
          // set required
          this.required = true;

          // require ui
          require('jquery-ui/ui/data');
          require('jquery-ui/ui/version');
          require('jquery-ui/ui/plugin');
          require('jquery-ui/ui/scroll-parent');
          require('jquery-ui/ui/safe-blur');
          require('jquery-ui/ui/safe-active-element');
          require('jquery-ui/ui/disable-selection');
          require('jquery-ui/ui/widget');
          require('jquery-ui/ui/widgets/mouse');
          require('jquery-ui/ui/widgets/resizable');
          require('jquery-ui/ui/widgets/draggable');

          // require gridstack
          require('gridstack/dist/gridstack');

          // require local
          require('editable/public/js/jquery-ui');
        }
        
        // gridstack
        jQuery(this.$('[ref="editable"]')).gridstack({}).on('change', (e) => {
          // data-gs-x="0" data-gs-y="1" data-gs-width="12" data-gs-height="4"
          // commit to items
          jQuery('.grid-stack-item', this.$('[ref="editable"]')).each((i, item) => {
            // child
            const child = jQuery(item);
            const data = child.data();

            // get block
            const block = this.placement.get('blocks', []).find(b => b.uuid === jQuery('[data-block]', item).attr('data-block'));
            
            // check block
            if (child.is('.grid-stack-item-add')) {
              // set add grid
              this.placement.set('add', {
                _grid : {
                  x : data.gsX,
                  y : data.gsY,
                  h : data.gsHeight,
                  w : data.gsWidth,
                }
              });
            } else {
              // set grid
              block._grid = {
                x : data.gsX,
                y : data.gsY,
                h : data.gsHeight,
                w : data.gsWidth,
              };
            }
          });

          // save
          this.savePlacement();
        });

        // data
        this.grid = jQuery(this.$('[ref="editable"]')).data('gridstack');
      }

      /**
      * updates grid
      */
      updateGrid() {
        // remove grid
        this.grid.destroy();

        // update
        this.show = false;
        this.update();
        this.show = true;
        this.update();

        // init grid
        this.initGrid();
      }
    }
  </script>
</eden-editable>
